@model GTPTracker.VM.SeriesIndexVM
@{
	Layout = null;
}
@Html.Partial("Init")
<script src="@Url.Content("~/assets/js/libs/jquery/jquery-1.11.2.min.js")"></script>
<link type="text/css" rel="stylesheet" href="https://rawgit.com/MEYVN-digital/mdl-selectfield/master/mdl-selectfield.min.css" />
<link id="favicon" rel="icon" type="image/png" sizes="16x16" href="@Url.Content("~/assets/img/favicon.png")">
<link rel='shortcut icon' href="@Url.Content("~/assets/img/favicon.ico")" type='image/x-icon'/ >


<div class="modal fade" id="modalAlert" tabindex="-1" role="dialog" aria-labelledby="modalAlertLabel">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-body">
				<div class="row">
					<div style="text-align: center;">
						<div class="login-logo">
							<!--<img src="http://www.gtptoolbox.com/assets/img/gtp-logo.jpg" alt="" />-->
                            <img src="@Url.Content("~/assets/img/gtp-logo.jpg")" alt="" />
						</div>
						<div class="row login-logo-text">
							<p>GTP</p>
							<p>Toolbox</p>
						</div>
					</div>
				</div>
				<div class="mdl-card__actions">
					<div class="row">
						<div class="col-xs-10 col-xs-offset-1">
							<div class="success-tick">
								<div class="tick">
									<i id="done_all" class="material-icons">done_all</i>
								</div>
								<div class="tick-text">
									<p id="primaryText"></p>
									<p id="secondaryText"></p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<script src="https://rawgit.com/MEYVN-digital/mdl-selectfield/master/mdl-selectfield.min.js"></script>
<header id="header-filter">
	<div class="header-filter-menu">
		<div class="btn-group">
			<a data-cat-value="" href="@Url.Action("IndexItems", "Series")" type="button" class="@(Url.Action("IndexItems", "Series") == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">all</a>
			<a data-cat-value="1" href="@Url.Action("IndexItems", new { category = "1" })" type="button" class="@(Url.Action("IndexItems", new { category = "1" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">THERMO-Riser</a>
			<a data-cat-value="2" href="@Url.Action("IndexItems", new { category = "2" })" type="button" class="@(Url.Action("IndexItems", new { category = "2" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">POINT-Riser</a>
			<a data-cat-value="3" href="@Url.Action("IndexItems", new { category = "3" })" type="button" class="@(Url.Action("IndexItems", new { category = "3" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">Sleeves</a>
			<a data-cat-value="4" href="@Url.Action("IndexItems", new { category = "4" })" type="button" class="@(Url.Action("IndexItems", new { category = "4" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">ECO-Riser</a>
			<a data-cat-value="5" href="@Url.Action("IndexItems", new { category = "5" })" type="button" class="@(Url.Action("IndexItems", new { category = "5" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">Filter-Riser</a>
		</div>
		@if (Model.role != null)
            {

                if (Model.role == "GTP General Manager" || Model.role == "GTP KAM")
                {
				<span style="display: inline-block;margin-left: 20px;">

					@using (Html.BeginForm("IndexItems", "Series", FormMethod.Get))
					{

						@Html.DropDownList("idTenant", new SelectList(Model.lTenants, "id", "name", Model.tenant), "All customers", new { onchange = "tenantChanged();" })
						if (Model.canShowIncludePublicProducts)
						{
							if (Model.includePublicProductsValue == false)
							{<span id="divIncludePublic" name="divIncludePublic" class="margin-right-xxl margin-left-xxl" style="color:#fff;">
						<label class="checkbox-inline checkbox-styled checkbox-styled-white">
							<input type="checkbox" id="includePublicProductCB" name="includePublicProductCB" value="option1" onchange="tenantChanged();" />
						</label>Include public products
					</span>}
							if (Model.includePublicProductsValue == true)
							{<span id="divIncludePublic" name="divIncludePublic" class="margin-right-xxl margin-left-xxl" style="color:#fff;">
						<label class="checkbox-inline checkbox-styled checkbox-styled-white">
							<input type="checkbox" checked id="includePublicProductCB" name="includePublicProductCB" value="option1" onchange="tenantChanged();" />
						</label>Include public products
					</span>}
						}
					}
				</span>
                }
                else
                {
				<span class="margin-right-xxl margin-left-xxl" style="color:#fff;">
					<label class="checkbox-inline checkbox-styled checkbox-styled-white">
						<input type="checkbox" value="option1" onchange="window.location.href='@Url.Action("IndexItemsMyProducts", "Series")'">
					</label>Show only my products
				</span>}
            }

	</div>
</header>
<!-- BEGIN CONTENT-->
<div id="content">
	<section>
		<div class="section-body contain-lg">
			<div class="row">
				<div class="col-sm-10 col-sm-offset-1 margin-bottom-xxl">
					@if (ViewBag.alert == "1")
					{
						<script type="text/javascript">
						    $(document).ready(function () {
						        $(".tick-text #primaryText").html("Profile saved <span class='text-color--blue font-600'>successfully</span>");
						        $('#modalAlert').modal("show");
						    });
						</script>
						<!--<div class="alert alert-success" role="alert">
							Profile saved correctly
						   <!-- <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						</div>-->
					}
					@if (ViewBag.alert == "2")
					{
						<script type="text/javascript">
						    $(document).ready(function () {
						        $(".tick-text #primaryText").html("Password changed has been changed <span class='text-color--blue font-600'>successfully</span>");
						        $('#modalAlert').modal("show");
						    });
						</script>
						<!--<div class="alert alert-success" role="alert">
							Password changed correctly
						</div> -->
					}
					@if (ViewBag.alert == "3")
					{
						<script type="text/javascript">
						    $(document).ready(function () {
						        $(".tick-text #primaryText").html("Welcome to <span class='text-color--blue font-600'>GTP Toolbox.</span> <br>Your account is active now.<br/>");
						        $(".tick-text #secondaryText").html("If you are a customer we will upgrade your account <br>permissions in the next 48 hours. You will receive an</br> extra email which confirms your role.<br/>");
						        $('#modalAlert').modal("show");
						    });
						</script>
						<!--<div class="alert alert-success" role="alert">
							Welcome to GTP ToolBox. Your account is active now. <br />If you are a customer we will upgrade your account permissions in the next 48 hours. You will receive an extra email which confirms your role.
						</div>-->
					}
					@using (Html.BeginForm("IndexItems", "Series", FormMethod.Get, new { @role = "form", @class = "form-horizontal main-index-form" }))
					{
						<input type="hidden" id="category-input" name="category" value="@ViewBag.category" />
						if (Model.role == "GTP General Manager" || Model.role == "GTP KAM")
						{
							<input type="hidden" id="tenant-input" name="idTenant" value="@ViewBag.idTenant" />
							<input type="hidden" id="includePublicProducts" name="includePublicProducts" value="@ViewBag.idTenant" />
						}
						<div class="card card-default">
							<!-- style-primary  card-outlined card-underline card-outlined -->
							<div class="card-body">
								<div class="row">
									<div class="col-sm-6">
										<div class="form-group">
											<label for="Specific" class="col-sm-4 control-label">Search for a specific type</label>
											<div class="col-sm-8">
												<input type="text" class="form-control" value="@Model.filterSpecific" id="Specific" name="Specific" placeholder="e.g. TG 5023" />
											</div>
										</div>
									</div>
									<div class="col-sm-6">
										<div class="form-group">
											<label for="General" class="col-sm-4 control-label">Or in general</label>
											<div class="col-sm-8">
												<input type="text" class="form-control" value="@Model.filterGeneral" id="General" name="General" placeholder="e.g. THERMO" />
											</div>
										</div>
									</div>
								</div>
								<div class="row">
									<div class="col-sm-2">
										<div class="form-group">
											<label for="Modulus" class="col-sm-6 control-label">Modulus</label>
											<div class="col-sm-6" style="text-align: center;">
												<select name="ModulusFrom" id="ModulusFrom" class="form-control">
													<option selected>All</option>
													@Html.Raw(Model.selectModulusFrom)
												</select>
												<span>to</span>
												<select name="ModulusTo" id="ModulusTo" class="form-control">
													<option selected>All</option>
													@Html.Raw(Model.selectModulusTo)
												</select>
											</div>
										</div>
									</div>
									<div class="col-sm-2">
										<div class="form-group">
											<label for="Volume" class="col-sm-6 control-label">Volume</label>
											<div class="col-sm-6" style="text-align: center;">
												<select name="VolumeFrom" id="Volume" class="form-control">
													@if (Model.filterVolume == null)
													{
														<option selected>All</option>}
													@if (Model.filterVolume != null)
													{
														<option>All</option>}
													@Html.Raw(Model.selectVolumeFrom)
												</select>
												<span>to</span>
												<select name="VolumeTo" id="Volume" class="form-control">
													@if (Model.filterVolume == null)
													{
														<option selected>All</option>}
													@if (Model.filterVolume != null)
													{
														<option>All</option>}
													@Html.Raw(Model.selectVolumeTo)
												</select>
											</div>
										</div>
									</div>
									<div class="col-sm-2">
										<div class="form-group">
											<label for="Height" class="col-sm-6 control-label">Height</label>
											<div class="col-sm-6" style="text-align: center;">
												<select name="HeightFrom" id="Height" class="form-control">
													@if (Model.filterHeight == null)
													{
														<option selected>All</option>}
													@if (Model.filterHeight != null)
													{
														<option>All</option>}
													@Html.Raw(Model.selectHeightFrom)
												</select>
												<span>to</span>
												<select name="HeightTo" id="Height" class="form-control">
													@if (Model.filterHeight == null)
													{
														<option selected>All</option>}
													@if (Model.filterHeight != null)
													{
														<option>All</option>}
													@Html.Raw(Model.selectHeightTo)
												</select>
											</div>
										</div>
									</div>
									<div class="col-sm-3">
										<div class="form-group">
											<label for="OuterDiameter" class="col-sm-6 control-label">Outer Diameter</label>
											<div class="col-sm-6" style="text-align: center;">
												<select name="outerDiameterFrom" id="outerDiameterFrom" class="form-control">
													@if (Model.filterOuterDiameter == null)
													{
														<option selected>All</option>}
													@if (Model.filterOuterDiameter != null)
													{
														<option>All</option>}
													@Html.Raw(Model.selectOuterFrom)
												</select>
												<span>to</span>
												<select name="outerDiameterTo" id="outerDiameterTo" class="form-control">
													@if (Model.filterOuterDiameter == null)
													{
														<option selected>All</option>}
													@if (Model.filterOuterDiameter != null)
													{
														<option>All</option>}
													@Html.Raw(Model.selectOuterTo)
												</select>
											</div>
										</div>
									</div>
									<div class="col-sm-3">
										<div class="form-group">
											<label for="ContactArea" class="col-sm-6 control-label">Contact Area</label>
											<div class="col-sm-6" style="text-align: center;">
												<select name="contactAreaFrom" id="contactAreaFrom" class="form-control">
													@if (Model.filterContactArea == null)
													{
														<option selected>All</option>}
													@if (Model.filterContactArea != null)
													{
														<option>All</option>}
													@Html.Raw(Model.selectContactFrom)
												</select>
												<span>to</span>
												<select name="contactAreaTo" id="contactAreaTo" class="form-control">
													@if (Model.filterContactArea == null)
													{
														<option selected>All</option>}
													@if (Model.filterContactArea != null)
													{
														<option>All</option>}
													@Html.Raw(Model.selectContactTo)
												</select>
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="card-actionbar">
								<div class="card-actionbar-row">
									<button type="reset" class="btn ink-reaction" onclick="window.location.href = '@Url.Action("IndexItems", "Series")'">Reset</button>
									<button type="submit" class="btn ink-reaction btn-primary-dark">Apply now</button>
								</div>
							</div>
						</div>
					}
				</div>
			</div>
			@if (Model.lProducts.Count() == 0 || Model.lSeries.Count() == 0)
			{
				<div class="row">
					<div class="col-sm-10 col-sm-offset-1 margin-bottom-xxl">
						<div class="card card-default ">
							<!-- style-primary card-outlined card-underline card-outlined -->
							<a>
								<div class="card-head-with-button-right card-head card-head-lg js-header" style="text-align: center; padding: 0;">
									<header>
										<h5>Sorry, no GTP product matchs your search</h5>
									</header>
								</div>
							</a>
						</div>
					</div>
				</div>
			}
			@foreach (var item in Model.lSeries)
			{
				if (Model.lProducts.Where(p => p.idSerie == item.id).Count() > 0)
				{
					<div class="row">
						<div class="col-sm-10 col-sm-offset-1 margin-bottom-xxl">
							<div class="card card-default">
								<!-- style-primary  card-outlined card-underline card-outlined -->
								<a>
									<div class="card-head-with-button-right card-head card-head-lg js-header">
										<header>
											@item.text
										</header>
									</div>
								</a><!--end .card-head -->
								<div class="card-body no-padding-bottom">
									<div class="row margin-bottom-xxl">
										<div class="col-sm-2">
											<img src="@Url.Content("~/Content/images/" + item.imageFileName)" width="100%" />
										</div>
										<div class="col-sm-10">
											<p>
												<b>Characteristics</b> @Html.Raw(item.characteristics)
												<br /><br />
												<b>Applications</b> @Html.Raw(@item.applications)
											</p>
										</div>
									</div>
									<br />


									<!-- TABLE START -->
									<table class="table table-hover1 vertical-divided">
										<thead class="js-table">
											<tr>
												<th style="width: 160px;">Type</th>
												<th>Modulus [cm]</th>
												<th>Volume [cm³]</th>
												<th>Height [mm]</th>
												<th>Outer Diameter [mm]</th>
												<th>Contact Area [mm]</th>
												@if (ViewBag.HideUserPanel == null || (ViewBag.HideUserPanel != null && !ViewBag.HideUserPanel))
												{
													if (ViewBag.ShowAnonUserPanel == null || (ViewBag.ShowAnonUserPanel != null && !ViewBag.ShowAnonUserPanel))
													{
														<th style="width: 120px;" class="text-right">Files</th>
}
												}
											</tr>
										</thead>
										<tbody>
											@foreach (var product in Model.lProducts.Where(p => p.idSerie == item.id))
											{
												<tr>
													<td>
														<span>@product.type</span>
														@if (Model.lMyProducts != null && Model.lMyProducts.Where(p => p.id == product.id).Count() > 0)
														{<i class="fa fa-check"></i>}
														<i data-toggle="tooltip" data-placement="top" title="" data-original-title="@product.status" class="product_status @product.status">&nbsp;</i>

													</td>
													<td>@product.modulus</td>
													<td>@product.volume</td>
													<td>@product.Height</td>
													<td>@GTPTracker.Helpers.formatter.getOuter(@product.outer1, @product.outer2)</td>
													<td>@GTPTracker.Helpers.formatter.getContact(@product.contact1, @product.contact2)</td>

													@if (ViewBag.HideUserPanel == null || (ViewBag.HideUserPanel != null && !ViewBag.HideUserPanel))
													{
														if (ViewBag.ShowAnonUserPanel == null || (ViewBag.ShowAnonUserPanel != null && !ViewBag.ShowAnonUserPanel))
														{
															<td class="text-right">
																@if (Model.lFiles.Where(p => p.refNumber == product.refNumber).FirstOrDefault() == null)
																{ <text><div style="color:#d3d3d3">not available</div></text> }
																@if (Model.lFiles.Where(p => p.refNumber == product.refNumber).FirstOrDefault() != null)
																{<select class="form-control static dirty js-download">
																	<option disabled="disabled" selected="selected">Download</option>
																	@foreach (var file in Model.lFiles.Where(p => p.refNumber == product.refNumber))
																	{
																		if (file.internalGTP == true)
																		{
																			<option value="@Url.Action("DownloadFile", "Products", new { Uri = file.URI }), @Url.Action("Create", "UserDownloads", new { idFile = file.id })"><i class="fa fa-check"></i> @Path.GetExtension(file.fileName) (int)</option>}
																		if (file.internalGTP != true)
																		{
																			<option value="@Url.Action("DownloadFile", "Products", new { Uri = file.URI }), @Url.Action("Create", "UserDownloads", new { idFile = file.id })"> @Path.GetExtension(file.fileName)</option>}
																	}
																</select>}
															</td>
}
													}

												</tr>
}
										</tbody>
									</table>
								</div>
							</div><!--end .card -->
						</div><!--end .col -->
					</div>
				}
			}
		</div>
	</section>
</div>

<div class="footer-gtp">
	<a href="/imprint">Imprint</a>
</div>

<script>
    /** DOWNLOAD ON SELECT */
    (function () {
        var select = document.querySelectorAll('.js-download'),
			i = 0,
			len = select.length;
        for (i; i < len; i++) {
            select[i].addEventListener('change', function (evt) {
                var value = this.options[this.selectedIndex].value;
                var downloadAction = value.split(",")[0]
                var updateAction = value.split(",")[1]

                window.open(downloadAction, '_self');
                xhrGetData(updateAction, function () { return; });
            }, false);
        }
    })();

    /** FIX SECTION HEADERS ON SCROLLING */
    (function () {
        var header = document.querySelectorAll('.js-header'),
			referenceClone = null,
			clone = null,

			table = document.querySelectorAll('.js-table'),
			tableWrapper = null;

        window.addEventListener('scroll', scrollHandler, false);

        function scrollHandler(evt) {
            var i = 0,
				len = header.length;

            for (i; i < len; i++) {
                var head = header[i],
					height = head.clientHeight,

					distanceTop = head.offsetParent.getBoundingClientRect().top,
					distanceBottom = head.offsetParent.getBoundingClientRect().bottom,

					topBound = 124,
					bottomBound = (topBound + height);

                if ((distanceTop < topBound) && (distanceBottom > bottomBound)) {
                    if (clone === null) {
                        referenceClone = head.cloneNode(true);
                        clone = head.cloneNode(true);

                        clone.style.position = 'fixed';
                        clone.style.top = (topBound + 'px');
                        clone.style.left = (head.getBoundingClientRect().left + 'px');
                        clone.style.width = (head.clientWidth + 'px');
                        clone.style.zIndex = 1;
                        clone.style.backgroundColor = '#fff';
                        clone.style.borderBottom = '1px solid rgba(150, 156, 156, 0.4)';
                        clone.style.paddingRight = '0px';

                        document.body.appendChild(clone);
                    }
                } else {
                    if ((clone !== null) && (head.isEqualNode(referenceClone))) {
                        document.body.removeChild(clone);
                        referenceClone = null;
                        clone = null;
                        tableWrapper = null;
                    }
                }

                if ((table[i].offsetParent.getBoundingClientRect().top < topBound + height) && (table[i].offsetParent.getBoundingClientRect().bottom > bottomBound + (table[i].clientHeight))) {
                    if (tableWrapper === null) {
                        tableHead = table[i].cloneNode(true);

                        tableWrapper = document.createElement('table');
                        tableWrapper.className = 'table table-hover vertical-divided';
                        tableWrapper.style.marginBottom = '0px';
                        tableWrapper.style.marginLeft = '24px';
                        tableWrapper.style.marginRight = '24px';
                        tableWrapper.style.width = '95.2%';
                        tableWrapper.appendChild(tableHead);

                        clone.appendChild(tableWrapper);
                    }
                } else {
                    if ((clone !== null) && (tableWrapper !== null) && (head.isEqualNode(referenceClone))) {
                        clone.removeChild(tableWrapper);
                        tableWrapper = null;
                    }
                }
            }
        }
    })();


    (function () {

    });


</script>

<script type="text/javascript">
    function tenantChanged() {
        $("#tenant-input").val($("#idTenant").val());
        if (document.getElementById("includePublicProductCB")) {
            var lfckv = document.getElementById("includePublicProductCB").checked;
            $("#includePublicProducts").val(lfckv);
        }
        $(".main-index-form").submit();
    }
    var readyfunc = function () {
        $("[data-cat-value]").click(function (e) {
            e.preventDefault();
            $("#category-input").val($(this).attr("data-cat-value"));
            $(".main-index-form").submit();
        });

        $("[data-cat-value='" + $("#category-input").val() + "']").addClass("btn-primary-dark");
    };
</script>

<!-- /////// INTERCOM ANALYTICS BEGIN \\\\\\\\\  -->

<script>

	var date = new Date().getTime();
	window.intercomSettings = {
		app_id: "dacfgd9m",
		id: "@Session["IDUSER"]", // user id
		name: "@Session["USERNAME"]", // Full name
		email: "customer@example.com", // Email address
		business_role: "@Session["BUSINESSROLE"]", //user business role
		created_at: date // Signup date as a Unix timestamp
	};
</script>
<script>    (function () {
        var w = window; var ic = w.Intercom; if (typeof ic === "function")
        { ic('reattach_activator'); ic('update', intercomSettings); }
        else {
            var d = document;
            var i = function () {
                i.c(arguments);
            };
            i.q = [];
            i.c = function (args) {
                i.q.push(args);
            };
            w.Intercom = i;
            function l() {
                var s = d.createElement('script');
                s.type = 'text/javascript';
                s.async = true;
                s.src = 'https://widget.intercom.io/widget/dacfgd9m';
                var x = d.getElementsByTagName('script')[0];
                x.parentNode.insertBefore(s, x);
            }
            if (w.attachEvent) { w.attachEvent('onload', l); }
            else { w.addEventListener('load', l, false); }
        }
    })()</script>

<!-- /////// INTERCOM ANALYTICS END \\\\\\\\\\\  -->

@Html.Partial("end")
