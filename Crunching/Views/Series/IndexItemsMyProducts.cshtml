@model GTPTracker.VM.MyProductsVM
@{
    Layout = null;
}
@Html.Partial("Init")

    <header id="header-filter">
        <div class="header-filter-menu">
          <!--  <a href="@Url.Action("IndexItems", "Series")" class="margin-right-xxl margin-left-xxl" style="color:#fff;"><i class="fa fa-long-arrow-left margin-right-xl"></i> Back to home</a>-->
            <div class="btn-group">
                <a data-cat-value="" href="@Url.Action("Index", "Catalog")" type="button" class="@(Url.Action("Index", "Catalog") == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">all</a>
                <a data-cat-value="1" href="@Url.Action("Index", "Catalog", new { category = "1" })" type="button" class="@(Url.Action("Index", "Catalog", new { category = "1" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">THERMO-Riser</a>
                <a data-cat-value="2" href="@Url.Action("Index", "Catalog", new { category = "2" })" type="button" class="@(Url.Action("Index", "Catalog", new { category = "2" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">POINT-Riser</a>
                <a data-cat-value="3" href="@Url.Action("Index", "Catalog", new { category = "3" })" type="button" class="@(Url.Action("Index", "Catalog", new { category = "3" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">Sleeves</a>
                <a data-cat-value="4" href="@Url.Action("Index", "Catalog", new { category = "4" })" type="button" class="@(Url.Action("Index", "Catalog", new { category = "4" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">ECO-Riser</a>
                <a data-cat-value="5" href="@Url.Action("Index", "Catalog", new { category = "5" })" type="button" class="@(Url.Action("Index", "Catalog", new { category = "5" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">Filter-Riser</a>
           <!--     <a href="@Url.Action("Documents")" type="button" class="@(Url.Action("Documents") == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">Documents</a>-->
            </div>
            <span class="margin-right-xxl margin-left-xxl" style="color:#fff;"><label class="checkbox-inline checkbox-styled checkbox-styled-white"><input type="checkbox" checked value="option1" onchange="window.location.href='@Url.Action("Index", "Catalog")'"></label>Show only my products</span>
        </div>
    </header>
    <!-- BEGIN CONTENT-->
    <div id="content">
        <section>
            <div class="section-body contain-lg">
                   <div class="row">
                    <div class="col-sm-10 col-sm-offset-1 margin-bottom-xxl">
                        @using (Html.BeginForm("IndexItemsMyProducts", "Series", FormMethod.Get, new { @role = "form", @class = "form-horizontal main-index-form" }))
                        {
                            <input type="hidden" id="category-input" name="category" value="@ViewBag.category" />

                            <div class="card card-outlined card-underline style-primary" >
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="form-group">
                                                <label for="Specific" class="col-sm-4 control-label">Search for a specific type</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control" value="@Model.filterSpecific" id="Specific" name="Specific" placeholder="e.g. TG 5023" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="form-group">
                                                <label for="General" class="col-sm-4 control-label">Or in general</label>
                                                <div class="col-sm-8">
                                                    <input type="text" class="form-control" value="@Model.filterGeneral" id="General" name="General" placeholder="e.g. THERMO" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-2">
                                            <div class="form-group">
                                                <label for="Modulus" class="col-sm-6 control-label">Modulus</label>
                                                <div class="col-sm-6" style="text-align: center;">
                                                    <select name="ModulusFrom" id="Modulus" class="form-control">
                                                        <option selected>All</option>
                                                        @Html.Raw(Model.selectModulusFrom)
                                                    </select>
                                                    <span>to</span>
                                                    <select name="ModulusTo" id="Modulus" class="form-control">
                                                        <option selected>All</option>
                                                        @Html.Raw(Model.selectModulusTo)
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-2">
                                            <div class="form-group">
                                                <label for="Volume" class="col-sm-6 control-label">Volume</label>
                                                <div class="col-sm-6" style="text-align: center;">
                                                    <select name="VolumeFrom" id="Volume" class="form-control">
                                                        @if (Model.filterVolume == null)
                                                        {
                                                        <option selected>All</option>}
                                                        @if (Model.filterVolume != null)
                                                        {
                                                        <option>All</option>}
                                                        @Html.Raw(Model.selectVolumeFrom)
                                                    </select>
                                                    <span>to</span>
                                                    <select name="VolumeTo" id="Volume" class="form-control">
                                                        @if (Model.filterVolume == null)
                                                        {
                                                            <option selected>All</option>}
                                                        @if (Model.filterVolume != null)
                                                        {
                                                            <option>All</option>}
                                                        @Html.Raw(Model.selectVolumeTo)
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-2">
                                            <div class="form-group">
                                                <label for="Height" class="col-sm-6 control-label">Height</label>
                                                <div class="col-sm-6" style="text-align: center;">
                                                    <select name="HeightFrom" id="Height" class="form-control">
                                                        @if (Model.filterHeight == null)
                                                        {
                                                        <option selected>All</option>}
                                                        @if (Model.filterHeight != null)
                                                        {
                                                        <option>All</option>}
                                                        @Html.Raw(Model.selectHeightFrom)
                                                    </select>
                                                    <span>to</span>
                                                    <select name="HeightTo" id="Height" class="form-control">
                                                        @if (Model.filterHeight == null)
                                                        {
                                                         <option selected>All</option>}
                                                        @if (Model.filterHeight != null)
                                                        {
                                                         <option>All</option>}
                                                        @Html.Raw(Model.selectHeightTo)
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="form-group">
                                                <label for="OuterDiameter" class="col-sm-6 control-label">Outer Diameter</label>
                                                <div class="col-sm-6" style="text-align: center;">
                                                    <select name="outerDiameterFrom" id="outerDiameterFrom" class="form-control">
                                                        @if (Model.filterOuterDiameter == null)
                                                        {
                                                        <option selected>All</option>}
                                                        @if (Model.filterOuterDiameter != null)
                                                        {
                                                        <option>All</option>}
                                                        @Html.Raw(Model.selectOuterFrom)
                                                    </select>
                                                    <span>to</span>
                                                    <select name="outerDiameterTo" id="outerDiameterTo" class="form-control">
                                                        @if (Model.filterOuterDiameter == null)
                                                        {
                                                         <option selected>All</option>}
                                                        @if (Model.filterOuterDiameter != null)
                                                        {
                                                         <option>All</option>}
                                                        @Html.Raw(Model.selectOuterTo)
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="form-group">
                                                <label for="ContactArea" class="col-sm-6 control-label">Contact Area</label>
                                                <div class="col-sm-6" style="text-align: center;">
                                                    <select name="contactAreaFrom" id="contactAreaFrom" class="form-control">
                                                        @if (Model.filterContactArea == null)
                                                        {
                                                        <option selected>All</option>}
                                                        @if (Model.filterContactArea != null)
                                                        {
                                                        <option>All</option>}
                                                        @Html.Raw(Model.selectContactFrom)
                                                    </select>
                                                    <span>to</span>
                                                    <select name="contactAreaTo" id="contactAreaTo" class="form-control">
                                                        @if (Model.filterContactArea == null)
                                                        {
                                                         <option selected>All</option>}
                                                        @if (Model.filterContactArea != null)
                                                        {
                                                         <option>All</option>}
                                                        @Html.Raw(Model.selectContactTo)
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-actionbar">
                                    <div class="card-actionbar-row">
                                        <button type="reset" class="btn ink-reaction" onclick="window.location.href = '@Url.Action("Index", "Catalog")'">Reset</button>
                                        <button type="submit" class="btn ink-reaction btn-primary-dark">Apply now</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                @if (Model.lMyProducts.Count() == 0)
                {
                    <div class="row">
                        <div class="col-sm-10 col-sm-offset-1 margin-bottom-xxl">
                            <div class="card card-outlined card-underline style-primary">
                                <a>
                                    <div class="card-head-with-button-right card-head card-head-lg js-header">
                                        <header>
                                            Sorry, no GTP product matchs your search
                                        </header>
                                    </div>
                                </a>
                            </div>
                        </div>
                    </div>
                }
                @foreach (var item in Model.lSeries)
                {
                    if (Model.lMyProducts.Where(p => p.idSerie == item.id).Count() > 0)
                    {
                    <div class="row">
                        <div class="col-sm-10 col-sm-offset-1 margin-bottom-xxl">
                            <div class="card card-outlined card-underline style-primary">
                                <a>
                                    <div class="card-head-with-button-right card-head card-head-lg js-header">
                                        <header>
                                            @item.text
                                        </header>
                                    </div>
                                </a><!--end .card-head -->
                                <div class="card-body no-padding-bottom">
                                    <div class="row margin-bottom-xxl">
                                        <div class="col-sm-2">
                                            <img src="@Url.Content("~/Content/images/" + item.imageFileName)" width="100%" />
                                        </div>
                                        <div class="col-sm-10">
                                            <p>
                                                <b>Characteristics</b> @Html.Raw(item.characteristics)
                                                <br /><br />
                                                <b>Applications</b> @Html.Raw(@item.applications)
                                            </p>
                                        </div>
                                    </div>
                                    <br />


                                    <!-- TABLE START -->
                                    <table class="table  vertical-divided">
                                        <thead class="js-table">
                                            <tr>
                                                <th style="width: 160px;">Type</th>
                                                <th>Modulus [cm]</th>
                                                <th>Volume [cm³]</th>
                                                <th>Height [mm]</th>
                                                <th>Outer Diameter [mm]</th>
                                                <th>Contact Area [mm]</th>
                                                <th style="width: 120px;" class="text-right">Files</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var product in Model.lMyProducts.Where(p => p.idSerie == item.id))
                                            {
                                                <tr>
                                                    <td>
                                                        <span>@product.type</span>
                                                        @if (Model.lMyProducts.Where(p => p.id == product.id).Count() > 0)
                                                        {<i class="fa fa-check"></i>}
                                                         <i data-toggle="tooltip" data-placement="top" title="" data-original-title="@product.status" class="product_status @product.status">&nbsp;</i>                                                                                                                                                                    
                                                    </td>
                                                    <td>@product.modulus</td>
                                                    <td>@product.volume</td>
                                                    <td>@product.Height</td>
                                                    <td>@GTPTracker.Helpers.formatter.getOuter(@product.outer1, @product.outer2)</td>
                                                    <td>@GTPTracker.Helpers.formatter.getContact(@product.contact1, @product.contact2)</td>
                                                    <td class ="text-right">
                                                    @if (Model.lFiles.Where(p => p.refNumber == product.refNumber).FirstOrDefault() == null)
                                                                { <text><div style="color:#d3d3d3">not available</div></text> }
                                                    @if (Model.lFiles.Where(p => p.refNumber == product.refNumber).FirstOrDefault() != null)
                                                    {
                                                        <select class="form-control static dirty js-download">
                                                            <option disabled="disabled" selected="selected">Download</option>
                                                            @if (Model.lMyProducts.Where(p => p.id == product.id).Count() == 0 && (int)Session["IDTENANT"] != 1)
                                                            {
                                                                if (Model.lFiles.Where(p => p.refNumber == product.refNumber).FirstOrDefault() != null)
                                                                {
                                                                    foreach (var file in Model.lFiles.Where(p => p.refNumber == product.refNumber && Path.GetExtension(p.fileName).ToLower() == ".pdf"))
                                                                    {
                                                                        <option value="@Url.Content("~/Content/images/" + file.URI)">@Path.GetExtension(file.fileName)</option>
                                                                    }
                                                                }
                                                            }
                                                            @if (Model.lMyProducts.Where(p => p.id == product.id).Count() > 0 || (int)Session["IDTENANT"] == 1)
                                                            {
                                                                if (Model.lFiles.Where(p => p.refNumber == product.refNumber).FirstOrDefault() != null)
                                                                {
                                                                    foreach (var file in Model.lFiles.Where(p => p.refNumber == product.refNumber))
                                                                    {
                                                                        if (file.internalGTP == true)
                                                                        {<option value="@Url.Action("DownloadFile", "Products", new { Uri = file.URI }), @Url.Action("Create", "UserDownloads", new { idFile = file.id })"><i class="fa fa-check"></i> @Path.GetExtension(file.fileName) (int)</option>}
                                                                        if (file.internalGTP != true)
                                                                        {<option value="@Url.Action("DownloadFile", "Products", new { Uri = file.URI }), @Url.Action("Create", "UserDownloads", new { idFile = file.id })"> @Path.GetExtension(file.fileName)</option>}
                                                                    }
                                                                }
                                                            }
                                                        
                                                            
                                                        <!--    <option value="@Url.Action("CreateSample", "Tickets", new { id = product.id })">Request Sample</option>-->
                                                        </select>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div><!--end .card -->
                        </div><!--end .col -->
                    </div>
                    }
                }
            </div>
        </section>
    </div>
    <div class="footer-gtp">
        <a href="/imprint">Imprint</a>
    </div>

<script>
    /** SORT SELECT-OPTIONS **/
    /*    (function () {
    var elements = document.querySelectorAll('select');
    var i = 0,
    len = elements.length;

    for (i; i < len; i++) {
    sortSelect(elements[i]);
    }

    function sortSelect(select) {
    var tmpArr = new Array(),
    i = 0,
    len = select.options.length;

    for (i; i < len; i++) {
    tmpArr[i] = new Array();
    tmpArr[i][0] = select.options[i].text;
    tmpArr[i][1] = select.options[i].value;
    }
    tmpArr.sort(function (a, b) {
    if (a == 'All')
    return;
    return (parseFloat(a) - parseFloat(b));
    });
    while (select.options.length > 0) {
    select.options[0] = null;
    }

    i = 0;
    len = tmpArr.length;
    for (i; i < len; i++) {
    var op = new Option(tmpArr[i][0], tmpArr[i][1]);
    select.options[i] = op;
    }
    }
    })();*/

    /** DOWNLOAD ON SELECT */
    (function () {
        var select = document.querySelectorAll('.js-download'),
            i = 0,
            len = select.length;
        for (i; i < len; i++) {
            select[i].addEventListener('change', function (evt) {
                var value = this.options[this.selectedIndex].value;
                var downloadAction = value.split(",")[0]
                var updateAction = value.split(",")[1]

                window.open(downloadAction, '_self');
                xhrGetData(updateAction, function () { return; });
            }, false);
        }
    })();

    /** FIX SECTION HEADERS ON SCROLLING */
    (function () {
        var header = document.querySelectorAll('.js-header'),
            referenceClone = null,
            clone = null,

            table = document.querySelectorAll('.js-table'),
            tableWrapper = null;

        window.addEventListener('scroll', scrollHandler, false);

        function scrollHandler(evt) {
            var i = 0,
                len = header.length;

            for (i; i < len; i++) {
                var head = header[i],
                    height = head.clientHeight,

                    distanceTop = head.offsetParent.getBoundingClientRect().top,
                    distanceBottom = head.offsetParent.getBoundingClientRect().bottom,

                    topBound = 124,
                    bottomBound = (topBound + height);

                if ((distanceTop < topBound) && (distanceBottom > bottomBound)) {
                    if (clone === null) {
                        referenceClone = head.cloneNode(true);
                        clone = head.cloneNode(true);

                        clone.style.position = 'fixed';
                        clone.style.top = (topBound + 'px');
                        clone.style.left = (head.getBoundingClientRect().left + 'px');
                        clone.style.width = (head.clientWidth + 'px');
                        clone.style.zIndex = 1;
                        clone.style.backgroundColor = '#fff';
                        clone.style.borderBottom = '1px solid rgba(150, 156, 156, 0.4)';
                        clone.style.paddingRight = '0px';

                        document.body.appendChild(clone);
                    }
                } else {
                    if ((clone !== null) && (head.isEqualNode(referenceClone))) {
                        document.body.removeChild(clone);
                        referenceClone = null;
                        clone = null;
                        tableWrapper = null;
                    }
                }

                if ((table[i].offsetParent.getBoundingClientRect().top < topBound + height) && (table[i].offsetParent.getBoundingClientRect().bottom > bottomBound + (table[i].clientHeight))) {
                    if (tableWrapper === null) {
                        tableHead = table[i].cloneNode(true);

                        tableWrapper = document.createElement('table');
                        tableWrapper.className = 'table table-hover vertical-divided';
                        tableWrapper.style.marginBottom = '0px';
                        tableWrapper.style.marginLeft = '24px';
                        tableWrapper.style.marginRight = '24px';
                        tableWrapper.style.width = '95.2%';
                        tableWrapper.appendChild(tableHead);

                        clone.appendChild(tableWrapper);
                    }
                } else {
                    if ((clone !== null) && (tableWrapper !== null) && (head.isEqualNode(referenceClone))) {
                        clone.removeChild(tableWrapper);
                        tableWrapper = null;
                    }
                }
            }
        }
    })();


</script>
<script>
    var readyfunc = function () {
        $("[data-cat-value]").click(function (e) {
            e.preventDefault();
            $("#category-input").val($(this).attr("data-cat-value"));
            $(".main-index-form").submit();
        });

        $("[data-cat-value='" + $("#category-input").val() + "']").addClass("btn-primary-dark");
    };

</script>
@Html.Partial("end")