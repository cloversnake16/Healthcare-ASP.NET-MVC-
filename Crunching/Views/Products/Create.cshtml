@model Crunching.Models.Products

@{
    ViewBag.Title = "Create";
    Layout = null;
}
@Html.Partial("InitProducts")


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<div class="main-content">
	
	<div class="page-content">
    @using (Html.BeginForm("Create", "Products", FormMethod.Post, new { @class = "margin-bottom-40 ", @role = "form" }))
    {
    <div class="row-fluid">
       <!-- @Html.ValidationSummary(true)-->
		<div class="span12">
            @if (ViewBag.error != null)
            {
                <div class="alert alert-danger" role="alert" >
				    @ViewBag.error
			    </div>}
			        
    				        <div class="row-fluid">
						        <div class="span12">
							        <!--PAGE CONTENT BEGINS-->
                                    <h3 class="header smaller lighter blue">Create a new product</h3>
                                    <div class="widget-box">
								        <div class="widget-header">
									        <h4>Product Data</h4>
								        </div>
                                        <div class="widget-body">
									        <div class="widget-main">
                                                <table class="table">
                                                    <tr><td>Serie</td><td>@Html.DropDownListFor(model => model.idSerie, new SelectList(ViewBag.lSeries, "id", "text"), "-- None --", new { @class = "form-control dirty" })</td><td></td></tr>
                                                    <tr><td>Reference number</td><td>@Html.TextBoxFor(model => model.refNumber, new { @class = "form-control" })</td><td></td></tr>
                                                    <tr><td>Type</td><td>@Html.TextBoxFor(model => model.type, new { @class = "form-control" })</td><td></td></tr>
                                                    <tr><td>Modulus</td><td>@Html.TextBoxFor(model => model.modulus, new { @class = "form-control" })</td><td></td></tr>
                                                    <tr><td>Volume</td><td>@Html.TextBoxFor(model => model.volume, new { @class = "form-control" })</td><td></td></tr>
                                                    <tr><td>Height</td><td>@Html.TextBoxFor(model => model.Height, new { @class = "form-control" })</td><td></td></tr>
                                                    <tr><td>Outer Diameter 1</td><td>@Html.TextBoxFor(model => model.outer1, new { @class = "form-control" })</td><td></td></tr>
                                                    <tr><td>Outer Diameter 2</td><td>@Html.TextBoxFor(model => model.outer2, new { @class = "form-control" })</td><td></td></tr>
                                                    <tr><td>Contact Area 1</td><td>@Html.TextBoxFor(model => model.contact1, new { @class = "form-control" })</td><td></td></tr>
                                                    <tr><td>Contact Area 2</td><td>@Html.TextBoxFor(model => model.contact2, new { @class = "form-control" })<td></td></tr>
                                                    <tr><td>Status</td><td><select name="status" id="status"><option>public</option><option>custom</option><option>draft</option></select><td></td></tr>
                                                </table>                                              
                                            </div>
								        </div>
                                        <div class="widget-main">
                                <div class="control-group">
								    <label class="control-label">Documents</label>
                                    <table border="0" cellpadding="3" cellspacing="0" >
                                        <tr>
                                            <td>
                                                <select multiple id="docsCategories" name="docsCategories" class = "form-span3" onclick="getDocs()" style="height:300px">
                                                    @foreach (var item in ViewBag.lDocsCategories)
                                                    {
                                                        <option value="@item.id">@item.category</option>}
                                                </select>
                                            </td>
                                            <td>
                                                <select multiple id="docs" name="docs" class = "form-span3" style="width:200px; height:300px">
                                                    @foreach (Crunching.Models.GeneralProductsDocuments item in ViewBag.lDocs)
                                                    {
                                                        <option value="@item.id">@item.filename</option>}
                                                </select>
                                            </td>
                                            <td align="center" valign="middle">
                                                <input type="Button" class="btn" value="Add >>" style="width:100px" onClick="docsSelectMoveRowsRight()"/><br/>
                                                <br/>
                                                <input type="Button" class="btn" value="<< Remove" style="width:100px" onClick="docsSelectMoveRowsLeft()"/>
                                            </td>
                                            <td>
                                                <select id="assignedDocs" name="assignedDocs" size="9" MULTIPLE style="width:200px; height:300px">
                                                    @foreach (Crunching.Models.vDocsProducts item in ViewBag.lAssignedDocs)
                                                    {
                                                        <option >@item.filename</option>
                                                    }
                                                </select>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
							        </div>
							        <!--PAGE CONTENT ENDS-->
						        </div><!--/.span-->
					        </div><!--/.row-fluid-->
                    </div>                    
                </div>
    }  
    <div class="row-fluid">
        <div class="form-actions">
           	<button class="btn btn-info" type="button" onclick="javascript:SubmitForm()">
				<i class="icon-ok bigger-110"></i>
				Save
			</button>
			&nbsp; &nbsp; &nbsp;
			<button class="btn" type="reset" onclick="javascript:location.href='@Url.Action("Manager", new { id = @Model.id })'">
				<i class="icon-undo bigger-110"></i>
				Cancel
			</button>
		</div>
    </div>          
	</div><!--/.page-content-->				
</div><!--/.main-content-->
@Html.Partial("end")                
                      
<script>
    function SubmitForm() {
        $("#assignedDocs option").attr("selected", "selected");

        document.forms[0].submit();
    }
</script>     


<script>
    function removeOptions(selectbox) {
        var i;
        for (i = selectbox.options.length - 1; i >= 0; i--) {
            selectbox.remove(i);
        }
    }

    function addToDocsSelect(data) {
        $.each(data, function (i, obj) {
            $('#docs').append($('<option>').text(obj.filename).attr('value', obj.id));
        });
    }

    function getDocs() {
        var categories = document.getElementById("docsCategories");
        var idCategory = categories.options[categories.selectedIndex].value;
        var docs = document.getElementById("docs");

        $.ajax({
            url: '@Url.Action("getDocsByCategory", "Documents")',
            type: 'POST',
            data: { idCategory: idCategory },
            success: function (data) {
                console.log(JSON.stringify(data));
                removeOptions(docs); 
                addToDocsSelect(data);
            }
            , error: function (xhr, status, err) {
                if (xhr.status = 400) alert("Error, bad data in parameters = " + err + ". Please contact GTP.");
                else alert("Error = " + xhr.status);
            }
        });
    }
</script>

<script type="text/javascript">
    function docsSelectMoveRowsRight() {
        var SS1 = document.getElementById("docs");
        var SS2 = document.getElementById("assignedDocs");
        var SelID = '';
        var SelText = '';
        // Move rows from SS1 to SS2 from bottom to top
        for (i = SS1.options.length - 1; i >= 0; i--) {
            if (SS1.options[i].selected == true) {
                if (SS1.options[i] != "") {
                    var exists = false; // if already exists dont move
                    for (j = SS2.options.length - 1; j >= 0; j--) {
                        console.log(SS2.options[j].text + " -- " + SS1.options[i].text);
                        if (SS2.options[j].text === SS1.options[i].text)
                            exists = true;
                    }
                    if (exists == false) {
                        SelID = SS1.options[i].value;
                        SelText = SS1.options[i].text;
                        var newRow = new Option(SelText, SelID);
                        SS2.options[SS2.length] = newRow;
                        SS1.options[i] = null;
                    }
                }
            }
        }
    }
    function docsSelectMoveRowsLeft() {
        var SS1 = document.getElementById("assignedDocs");
        var SS2 = document.getElementById("docs");
        var SelID = '';
        var SelText = '';
        for (i = SS1.options.length - 1; i >= 0; i--) {
            if (SS1.options[i].selected == true) {
                if (SS1.options[i] != "") {
                    var exists = false; // if already exists dont move
                    for (j = SS2.options.length - 1; j >= 0; j--) {
                        console.log(SS2.options[j].text + " -- " + SS1.options[i].text);
                        if (SS2.options[j].text === SS1.options[i].text)
                            exists = true;
                    }
                    if (exists == false) {
                        SelID = SS1.options[i].value;
                        SelText = SS1.options[i].text;
                        var newRow = new Option(SelText, SelID);
                        SS2.options[SS2.length] = newRow;
                        SS1.options[i] = null;
                    }
                    else SS1.options[i] = null;
                }
            }
        }
    }   
</script>          
 