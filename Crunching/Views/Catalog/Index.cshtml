@model GTPTracker.VM.CatalogIndexVM
@{
	Layout = null;
}
@Html.Partial("Init")
<script type="text/javascript" src="@Url.Content("~/assets/js/libs/jquery/jquery-1.11.2.min.js")"></script>
<link type="text/css" rel="stylesheet" href="https://rawgit.com/MEYVN-digital/mdl-selectfield/master/mdl-selectfield.min.css" />
<link id="favicon" rel="icon" type="image/png" sizes="16x16" href="@Url.Content("~/assets/img/favicon.png")"/>
<link rel='shortcut icon' href="@Url.Content("~/assets/img/favicon.ico")" type='image/x-icon' />


<div class="modal fade" id="modalAlert" tabindex="-1" role="dialog" aria-labelledby="modalAlertLabel">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-body">
				<div class="row">
					<div style="text-align: center;">
						<div class="login-logo">
							<!--<img src="http://www.gtptoolbox.com/assets/img/gtp-logo.jpg" alt="" />-->
                            <img src="@Url.Content("~/assets/img/gtp-logo.jpg")" alt="" />
						</div>
						<div class="row login-logo-text">
							<p>GTP</p>
							<p>Toolbox</p>
						</div>
					</div>
				</div>
				<div class="mdl-card__actions">
					<div class="row">
						<div class="col-xs-10 col-xs-offset-1">
							<div class="success-tick">
								<div class="tick">
									<i id="done_all" class="material-icons">done_all</i>
								</div>
								<div class="tick-text">
									<p id="primaryText"></p>
									<p id="secondaryText"></p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!--<script type="text/javascript" src="https://rawgit.com/MEYVN-digital/mdl-selectfield/master/mdl-selectfield.min.js"></script>-->
<header id="header-filter">
	<div class="header-filter-menu">
		<div class="btn-group">
			<!--<a data-cat-value="" href="@Url.Action("Index", "Catalog")" type="button" class="@(Url.Action("Index", "Catalog") == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">all</a>-->
            <a data-cat-value="" href="@Url.Action("Index", "Catalog")" type="button" class="@(!HttpContext.Current.Request.Url.PathAndQuery.Contains("category") || HttpContext.Current.Request.Url.PathAndQuery.Contains("category=&") ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">all</a>
			<a data-cat-value="1" href="@Url.Action("Index", new { category = "1" })" type="button" class="@(HttpContext.Current.Request.Url.PathAndQuery.Contains(Url.Action("Index", new { category = "1" })) ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">THERMO-Riser</a>
			<a data-cat-value="2" href="@Url.Action("Index", new { category = "2" })" type="button" class="@(HttpContext.Current.Request.Url.PathAndQuery.Contains(Url.Action("Index", new { category = "2" })) ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">POINT-Riser</a>
			<a data-cat-value="3" href="@Url.Action("Index", new { category = "3" })" type="button" class="@(HttpContext.Current.Request.Url.PathAndQuery.Contains(Url.Action("Index", new { category = "3" })) ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">Sleeves</a>
			<a data-cat-value="4" href="@Url.Action("Index", new { category = "4" })" type="button" class="@(HttpContext.Current.Request.Url.PathAndQuery.Contains(Url.Action("Index", new { category = "4" })) ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">ECO-Riser</a>
		<!--	<a data-cat-value="5" href="@Url.Action("Index", new { category = "5" })" type="button" class="@(Url.Action("Index", new { category = "5" }) == HttpContext.Current.Request.Url.PathAndQuery ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">Filter-Riser</a>-->
            <a data-cat-value="5" href="@Url.Action("Index", new { category = "5" })" type="button" class="@(HttpContext.Current.Request.Url.PathAndQuery.Contains(Url.Action("Index", new { category = "5" })) ? "btn-primary-dark" : "") btn ink-reaction btn-default-bright">Filter-Riser</a>
		</div> 
       
        @if (Model.role != null)
        {
            if (Model.role == "GTP General Manager" || Model.role == "GTP KAM")
            {
				<span style="display: inline-block;margin-left: 20px;">
	                @using (Html.BeginForm("Index", "Catalog", FormMethod.Get))
					{

						@Html.DropDownList("idTenant", new SelectList(Model.lTenants, "id", "name", Model.tenant), "All customers", new { onchange = "tenantChanged();" })
						if (Model.canShowIncludePublicProducts)
						{
							if (Model.includePublicProductsValue == false)
							{<span id="divIncludePublic" name="divIncludePublic" class="margin-right-xxl margin-left-xxl" style="color:#fff;">
						        <label class="checkbox-inline checkbox-styled checkbox-styled-white">
							        <input type="checkbox" id="includePublicProductCB" name="includePublicProductCB" value="option1" onchange="tenantChanged();" />
						        </label>Include public products
					        </span>
                            }
							if (Model.includePublicProductsValue == true)
							{<span id="divIncludePublic" name="divIncludePublic" class="margin-right-xxl margin-left-xxl" style="color:#fff;">
						        <label class="checkbox-inline checkbox-styled checkbox-styled-white">
							        <input type="checkbox" checked id="includePublicProductCB" name="includePublicProductCB" value="option1" onchange="tenantChanged();" />
						        </label>Include public products
					        </span>
                            }
						}
					}
				</span>
                }
                else
                {
				<span class="margin-right-xxl margin-left-xxl" style="color:#fff;">
					<label class="checkbox-inline checkbox-styled checkbox-styled-white">
						<input type="checkbox" value="option1" onchange="window.location.href='@Url.Action("IndexItemsMyProducts", "Series")'"/>
					</label>Show only my products
				</span>
                }
            }
	</div>
</header>
<!-- BEGIN CONTENT-->
<div id="content">
	@if (ViewBag.alert == "1")
 {
		<script type="text/javascript">
			$(document).ready(function () {
				//$(".tick-text #primaryText").text("FUCK"); //html("Profile saved <span class='text-color--blue font-600'>successfully</span>");
				$(".tick-text #primaryText").html("Profile saved <span class='text-color--blue font-600'>successfully</span>");
				$('#modalAlert').modal("show");
			});
		</script>		
 }
	@if (ViewBag.alert == "2")
 {
		<script type="text/javascript">
			$(document).ready(function () {
				$(".tick-text #primaryText").html("Password changed has been changed <span class='text-color--blue font-600'>successfully</span>");
				$('#modalAlert').modal("show");
			});
		</script>
 }
	@if (ViewBag.alert == "3")
 {
		<script type="text/javascript">
			$(document).ready(function () {
				$(".tick-text #primaryText").html("Welcome to <span class='text-color--blue font-600'>GTP Toolbox.</span> <br>Your account is active now.<br/>");
				$(".tick-text #secondaryText").html("If you are a customer we will upgrade your account <br>permissions in the next 48 hours. You will receive an</br> extra email which confirms your role.<br/>");
				$('#modalAlert').modal("show");
			});
		</script>		
 }
                    
    <section>
        <div id="series" class="section-body contain-lg"></div>   
    </section>
		
    <script type="text/javascript">
        var flag = false;
        var xhr = new XMLHttpRequest();
        var url = "@Html.Raw(Url.Action("PartialViewFirstSerie", "Catalog", new { category = @ViewBag.category }))";
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
                if (flag === false)
                    document.getElementById("series").innerHTML = xhr.responseText;                            
            }
        }
        xhr.open("GET", url, true);
        xhr.send();
            
        var xhr2 = new XMLHttpRequest();
        var url = "@Html.Raw(Url.Action("PartialViewCDRSerie", "Catalog", new
              {
                  modulusFrom = Model.selectModulusFrom,
                  modulusTo = Model.selectModulusTo,
                  idTenant = Model.tenant,
                  volumeFrom = Model.selectVolumeFrom,
                  volumeTo = Model.selectVolumeTo,
                  includePublicProducts = Model.includePublicProductsValue,
                  heightFrom = Model.selectHeightFrom
                  ,
                  heightTo = Model.selectHeightTo,
                  outerDiameterFrom = Model.selectOuterFrom,
                  outerDiameterTo = Model.selectOuterTo,
                  contactAreaFrom = Model.selectContactFrom,
                  contactAreaTo = Model.selectContactTo,
                  specific = Model.specific,
                  general = Model.general,
                  category = @ViewBag.category
              }))";
        xhr2.onreadystatechange = function () {
            if (xhr2.readyState == 4 && xhr2.status == 200) {
                document.getElementById("series").innerHTML=xhr2.responseText;
                // code from Alex 
                $(".product-file").change(function () {
                    dataLayer.push({'productFileType': $(this).children( ":selected" ).text(), 'event': 'downloadProductType' });
                    });

                if ($("div").is("#no-results-search") === true) {
                    dataLayer.push({ 'event': 'No results search' });
                }

                // end code from Alex
                flag = true;
                downloadOnSelect();
                fixHeaders();
            }
        }
        xhr2.open("GET", url, true);
        xhr2.send();
    </script>
</div>

<div class="footer-gtp">
	<a style="color:White" href="/imprint">Imprint</a>
</div>

<script type="text/javascript">
    // for the async call the download on select has to be called when the call returns ok. 
    function downloadOnSelect() {
        var select = document.querySelectorAll('.js-download'),
			i = 0,
			len = select.length;
        for (i; i < len; i++) {
            select[i].addEventListener('change', function (evt) {
                var value = this.options[this.selectedIndex].value;
                var downloadAction = value.split(",")[0]
                var updateAction = value.split(",")[1]

                window.open(downloadAction, '_self');
                xhrGetData(updateAction, function () { return; });
            }, false);
        }
    };

    /** DOWNLOAD ON SELECT */
    
    function fixHeaders() { // to be called when the async call returns ok
        var header = document.querySelectorAll('.js-header'),
			referenceClone = null,
			clone = null,

			table = document.querySelectorAll('.js-table'),
			tableWrapper = null;

        window.addEventListener('scroll', scrollHandler, false);

        function scrollHandler(evt) {
            var i = 0,
				len = header.length;

            for (i; i < len; i++) {
                var head = header[i],
					height = head.clientHeight,

					distanceTop = head.offsetParent.getBoundingClientRect().top,
					distanceBottom = head.offsetParent.getBoundingClientRect().bottom,

					topBound = 124,
					bottomBound = (topBound + height);

                if ((distanceTop < topBound) && (distanceBottom > bottomBound)) {
                    if (clone === null) {
                        referenceClone = head.cloneNode(true);
                        clone = head.cloneNode(true);

                        clone.style.position = 'fixed';
                        clone.style.top = (topBound + 'px');
                        clone.style.left = (head.getBoundingClientRect().left + 'px');
                        clone.style.width = (head.clientWidth + 'px');
                        clone.style.zIndex = 1;
                        clone.style.backgroundColor = '#fff';
                        clone.style.borderBottom = '1px solid rgba(150, 156, 156, 0.4)';
                        clone.style.paddingRight = '0px';

                        document.body.appendChild(clone);
                    }
                } else {
                    if ((clone !== null) && (head.isEqualNode(referenceClone))) {
                        document.body.removeChild(clone);
                        referenceClone = null;
                        clone = null;
                        tableWrapper = null;
                    }
                }

                if ((table[i].offsetParent.getBoundingClientRect().top < topBound + height) && (table[i].offsetParent.getBoundingClientRect().bottom > bottomBound + (table[i].clientHeight))) {
                    if (tableWrapper === null) {
                        tableHead = table[i].cloneNode(true);

                        tableWrapper = document.createElement('table');
                        tableWrapper.className = 'table table-hover vertical-divided';
                        tableWrapper.style.marginBottom = '0px';
                        tableWrapper.style.marginLeft = '24px';
                        tableWrapper.style.marginRight = '24px';
                        tableWrapper.style.width = '95.2%';
                        tableWrapper.appendChild(tableHead);

                        clone.appendChild(tableWrapper);
                    }
                } else {
                    if ((clone !== null) && (tableWrapper !== null) && (head.isEqualNode(referenceClone))) {
                        clone.removeChild(tableWrapper);
                        tableWrapper = null;
                    }
                }
            }
        }
    };

    /** FIX SECTION HEADERS ON SCROLLING */
</script>

<script type="text/javascript">
    function tenantChanged() {
        $("#tenant-input").val($("#idTenant").val());
        if (document.getElementById("includePublicProductCB")) {
            var lfckv = document.getElementById("includePublicProductCB").checked;
            $("#includePublicProducts").val(lfckv);
        }
        $(".main-index-form").submit();
    }
    var readyfunc = function () {
        $("[data-cat-value]").click(function (e) {
            e.preventDefault();
            $("#category-input").val($(this).attr("data-cat-value"));
            $(".main-index-form").submit();
        });

        $("[data-cat-value='" + $("#category-input").val() + "']").addClass("btn-primary-dark");
    };
</script>

<!-- /////// INTERCOM ANALYTICS BEGIN \\\\\\\\\  -->

<script type="text/javascript">
	var date = new Date().getTime();
	window.intercomSettings = {
		app_id: "dacfgd9m",
		id: "@Session["IDUSER"]", // user id
		name: "@Session["USERNAME"]", // Full name
		email: "customer@example.com", // Email address
		business_role: "@Session["BUSINESSROLE"]", //user business role
		created_at: date // Signup date as a Unix timestamp
	};
</script>
<script type="text/javascript">    
(function () {
        var w = window; var ic = w.Intercom; if (typeof ic === "function")
        { ic('reattach_activator'); ic('update', intercomSettings); }
        else {
            var d = document;
            var i = function () {
                i.c(arguments);
            };
            i.q = [];
            i.c = function (args) {
                i.q.push(args);
            };
            w.Intercom = i;
            function l() {
                var s = d.createElement('script');
                s.type = 'text/javascript';
                s.async = true;
                s.src = 'https://widget.intercom.io/widget/dacfgd9m';
                var x = d.getElementsByTagName('script')[0];
                x.parentNode.insertBefore(s, x);
            }
            if (w.attachEvent) { w.attachEvent('onload', l); }
            else { w.addEventListener('load', l, false); }
        }
    })()</script>

<!-- /////// INTERCOM ANALYTICS END \\\\\\\\\\\  -->

@Html.Partial("end")
