@model GTPTracker.VM.DocumentsEditAddVM

@{
    ViewBag.Title = "Create";
    Layout = null;
}

@Html.Partial("InitDocuments")

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<div class="main-content">
    <div class="page-content">
        @using (Html.BeginForm("Create", "Documents", FormMethod.Post, new { @role = "form", enctype = "multipart/form-data", @class = "form" }))
        {
            @Html.ValidationSummary(true)
		    <div class="row-fluid">
			    <div class="span12">
                    <div class="widget-box">
                        <div class="widget-header">
							<h4>Document Data</h4>
						</div>					    
                        <div class="widget-body">
						    <div class="widget-main">                            
                                <div class="control-group">
								    <label class="control-label">Upload Document</label>
                                    <input id="file" name="file" type="file" onchange="fileChanged()"/>
							    </div> 
                                <div class="control-group">
								    <label class="control-label">Document Name</label>
                                    @Html.EditorFor(model => model.doc.filename, new { @class = "span12" })
							    </div> 
                                <div class="control-group">
								    <label class="control-label">Status</label>
                                    @Html.DropDownListFor(model => model.doc.status, new SelectList(
                                          new List<Object>{ 
                                               new { value = "public" , text = "public"  },
                                               new { value = "custom" , text = "custom" },
                                               new { value = "internal" , text = "internal"}
                                            },
                                          "value", "text", Model.doc.status), new {  @onchange = "setCustomDiv()" })
							    </div> 
                                <div class="control-group">
								    <label class="control-label">Category</label>
                                    @Html.DropDownListFor(model => model.doc.category, new SelectList(Model.lCategories,
                                          "id",
                                          "category", Model.doc.category))
							    </div> 
                            </div>
					    </div>
                        <div id="divCustom">
                           <!-- <div class="widget-body">
						        <div class="widget-main">
                                    <div class="control-group">
								        <label class="control-label">Associated with products</label>
                                        <input type="checkbox" id="showProducts" name="showProducts" onclick="setDivProducts()"/>
							        </div>
                                </div>
                            </div>-->
                            <div id="divCustomers">
                                <div class="widget-body">
						            <div class="widget-main">
                                        <div class="control-group">
								            <label class="control-label">Customers</label>
                                            
                                            <table border="0" cellpadding="3" cellspacing="0" >
                                                <tr>
                                                    <td>
                                                        <select multiple id="Customers" name="Customers" class = "form-span3" style="width:200px; height:300px">
                                                            @foreach (Crunching.Models.vCustomers item in Model.lCustomers)
                                                            {
                                                                <option value="@item.id">@item.name</option>}
                                                        </select>
                                                    </td>
                                                    <td align="center" valign="middle">
                                                        <input type="Button" class="btn" value="Add >>" style="width:100px" onClick="SelectMoveCustomersRight()"/><br/>
                                                        <br/>
                                                        <input type="Button" class="btn" value="<< Remove" style="width:100px" onClick="SelectMoveCustomersLeft()"/>
                                                    </td>
                                                    <td>
                                                        <select id="assignedCustomers" name="assignedCustomers" size="9" MULTIPLE style="width:200px; height:300px">
                                                            @foreach (var item in Model.lAssignedCustomers)
                                                            {
                                                                <option >@item.name</option>
                                                            }
                                                        </select>
                                                    </td>
                                                    <td>                                                        
                                                        
                                                    </td>
                                                </tr>
                                            </table>
							            </div> 
                                    </div>
					            </div>
                            </div>   
                            <div id="divProducts">
                                <div class="widget-body">
						            <div class="widget-main">
                                        <div class="control-group">
								            <label class="control-label">Products</label>
                                            <table border="0" cellpadding="3" cellspacing="0" >
                                                <tr>
                                                    <td>
                                                        <select multiple id="series" name="series" class = "form-span3" onclick="getProducts()" style="height:300px">
                                                            @foreach (Crunching.Models.Series item in Model.lSeries)
                                                            {
                                                                <option value="@item.id">@item.text</option>}
                                                        </select>
                                                    </td>
                                                    <td>
                                                        <select multiple id="products" name="products" class = "form-span3" style="width:200px; height:300px">
                                                            @foreach (Crunching.Models.Products item in Model.lProducts)
                                                            {
                                                                <option value="@item.id">@item.type</option>}
                                                        </select>
                                                    </td>
                                                    <td align="center" valign="middle">
                                                        <input type="Button" class="btn" value="Add >>" style="width:100px" onClick="SelectMoveRowsRight()"/><br/>
                                                        <br/>
                                                        <input type="Button" class="btn" value="<< Remove" style="width:100px" onClick="SelectMoveRowsLeft()"/>
                                                    </td>
                                                    <td>
                                                        <select id="assignedProducts" name="assignedProducts" size="9" MULTIPLE style="width:200px; height:300px">
                                                            @foreach (var item in Model.lAssignedProducts)
                                                            {
                                                                <option >@item.type</option>
                                                            }
                                                        </select>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div  id="customersOriginInfo" ></div> 
                        </div>
				    </div>
                    @Html.HiddenFor(p => p.doc.category)
                    @Html.HiddenFor(p => p.doc.CategoryName)
                    @Html.HiddenFor(p => p.doc.id)
                    @Html.HiddenFor(p => p.doc.status)
                    @Html.HiddenFor(p => p.doc.URI)                    

                    <div id="alertCustomers" class="alert alert-danger" role="alert" style="display:none"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				        A custom document has to have at least one customer assigned
			        </div>

                    <div class="form-actions">
           			    <button class="btn btn-info" type="button" onclick="SubmitEditCustomerForm()">
						    <i class="icon-ok bigger-110"></i>
						    Save
					    </button>
					    &nbsp; &nbsp; &nbsp;
					    <button class="btn" type="reset" onclick="javascript:location.href='@Url.Action("manageDocuments")'">
						    <i class="icon-undo bigger-110"></i>
						    Cancel
					    </button>
				    </div>
				    <!--PAGE CONTENT ENDS-->
			    </div><!--/.span-->
		    </div><!--/.row-fluid-->
        }
	    </div><!--/.page-content-->
</div><!--/.main-content-->
@Html.Partial("end")

<script>
    function fileChanged() {
        var str = document.getElementById("file").value;
        var textFileName = str.split(/(\\|\/)/g).pop();
        var textFileWithoutExtension = textFileName.replace(/\.[^.$]+$/, '');
        var fileName = document.getElementById("doc_filename").value = textFileWithoutExtension;
    }
</script>

<style>
div.relative {
    position: relative;
    left: 200px;
}
a.relative {
    position: relative;
    left: 100px;
}
</style>
<script type="text/javascript">
    function showButtonFileName() {
        var textFileName = document.getElementById("textFileName");
        var buttonFileName = document.getElementById("buttonFileName");
        textFileName.style.display = "none";
        buttonFileName.style.display = "block";
    }
</script>

<script type="text/javascript">
    function updateOriginTable() {
        var originProduct = $('#assignedProducts option:selected');
        var x = document.getElementById("assignedCustomers");
        var txt = "";
        var i;
        for (i = 0; i < x.length; i++) {
            txt = txt + x.options[i].text + ",";
        }
        var products = document.getElementById("assignedProducts");
        var txtProducts = "";
        var i;
        for (i = 0; i < products.length; i++) {
            txtProducts = txtProducts + products.options[i].text + ",";
        }
        // alert(txt + " --- " + txtProducts);

        $.ajax({
            url: '@Url.Action("getCustomersFromProducts", "Documents")',
            type: 'POST',
            data: { productsList: txtProducts, customerList: txt },
            success: function (data) {
                console.log(JSON.stringify(data));
                $("#customersOriginInfo").html(data);
            }
            , error: function (xhr, status, err) {
                if (xhr.status = 400) alert("Error, bad data in parameters = " + err + ". Please contact GTP.");
                else alert("Error = " + xhr.status);
            }
        });
    } 
</script>

<script type="text/javascript">
    jQuery.noConflict(); // Reverts '$' variable back to other JS libraries
    jQuery(document).ready(function () {
        setCustomDiv();

        $("#assignedProducts option").attr("selected", "selected");
        var count = $('#assignedProducts option:selected').length;
        console.log("Ready - products " + count);
        /*if (count > 0) {
        document.getElementById("showProducts").checked = true;
        console.log("Show products " + document.getElementById("showProducts").checked);
        }*/
        setDivProducts();

        updateOriginTable();
    }); 
</script>

<script type="text/javascript">
    function setCustomDiv() {
        var divCustom = document.getElementById('divCustom');
        var statusSelect = document.getElementById('doc_status');
        console.log("statusSelect = " + statusSelect);
        var status = statusSelect.options[statusSelect.selectedIndex].text;
        if (status === "custom") divCustom.style.display = "block";
        else divCustom.style.display = "none";
    }
</script>

<script type="text/javascript">
    function setDivProducts() {
        var divProducts = document.getElementById('divProducts');
        //    var showProducts = document.getElementById('showProducts');
        //    if (showProducts.checked) 
        divProducts.style.display = "block";
        //    else divProducts.style.display = "none";
    }
</script>

<script type="text/javascript">

    function removeOptions(selectbox) {
        var i;
        for (i = selectbox.options.length - 1; i >= 0; i--) {
            selectbox.remove(i);
        }
    }

    function addToProductsSelect(data) {
        $.each(data, function (i, obj) {
            $('#products').append($('<option>').text(obj.type).attr('value', obj.id));
        }); 
    }

    function getProducts() {
        var series = document.getElementById("series");
        var idSerie = series.options[series.selectedIndex].value;
        var products = document.getElementById("products");

        $.ajax({
            url: '@Url.Action("getAllProducts", "Customers")',
            type: 'POST',
            data: { idSerie: idSerie },
            success: function (data) {
                console.log(JSON.stringify(data));
                removeOptions(products); addToProductsSelect(data);
                console.log(JSON.stringify(data));
            }
            , error: function (xhr, status, err) {
                if (xhr.status = 400) alert("Error, bad data in parameters = " + err + ". Please contact GTP.");
                else alert("Error = " + xhr.status);
            }
        });
    }
</script>

<script type="text/javascript">
    function SelectMoveRowsRight() {
        var SS1 = document.getElementById("products");
        var SS2 = document.getElementById("assignedProducts");
        var SelID = '';
        var SelText = '';
        // Move rows from SS1 to SS2 from bottom to top
        for (i = SS1.options.length - 1; i >= 0; i--) {
            if (SS1.options[i].selected == true) {
                if (SS1.options[i] != "") {
                    var exists = false; // if already exists dont move
                    for (j = SS2.options.length - 1; j >= 0; j--) {
                        console.log(SS2.options[j].text + " -- " + SS1.options[i].text);
                        if (SS2.options[j].text === SS1.options[i].text)
                            exists = true;
                    }
                    if (exists == false) {
                        SelID = SS1.options[i].value;
                        SelText = SS1.options[i].text;
                        var newRow = new Option(SelText, SelID);
                        SS2.options[SS2.length] = newRow;
                        SS1.options[i] = null;
                    }
                }
            }
        }
        updateOriginTable();
    }
    function SelectMoveRowsLeft() {
        var SS1 = document.getElementById("assignedProducts");
        var SS2 = document.getElementById("products");
        var SelID = '';
        var SelText = '';
        for (i = SS1.options.length - 1; i >= 0; i--) {
            if (SS1.options[i].selected == true) {
                if (SS1.options[i] != "") {
                    var exists = false; // if already exists dont move
                    for (j = SS2.options.length - 1; j >= 0; j--) {
                        console.log(SS2.options[j].text + " -- " + SS1.options[i].text);
                        if (SS2.options[j].text === SS1.options[i].text)
                            exists = true;
                    }
                    if (exists == false) {
                        SelID = SS1.options[i].value;
                        SelText = SS1.options[i].text;
                        var newRow = new Option(SelText, SelID);
                        SS2.options[SS2.length] = newRow;
                        SS1.options[i] = null;
                    }
                    else SS1.options[i] = null;
                }
            }
        }
        updateOriginTable();
    }

    function SubmitEditCustomerForm() {
        $("#assignedProducts option").attr("selected", "selected");
        $("#assignedCustomers option").attr("selected", "selected");

        var statusSelect = document.getElementById('doc_status');
        var status = statusSelect.options[statusSelect.selectedIndex].text;

        if (status === "custom") {
            var count = $('#reasonsList tr').length; // get number of rows of reason list
            if (count >= 2) document.forms[0].submit(); // if, apart from headers, there are customers on the reason list, submit
            else {                                      // trying to submit a public document without any customer assigned directly or via product, so show an alert
                var divAlertKAM = document.getElementById("alertCustomers");
                divAlertKAM.style.display = "block";
            }
        }
        else document.forms[0].submit(); // internal or public --> submit
    }
</script>



<script type="text/javascript">
    function SelectMoveCustomersRight() {
        var SS1 = document.getElementById("Customers");
        var SS2 = document.getElementById("assignedCustomers");
        var SelID = '';
        var SelText = '';
        // Move rows from SS1 to SS2 from bottom to top
        for (i = SS1.options.length - 1; i >= 0; i--) {
            if (SS1.options[i].selected == true) {
                if (SS1.options[i] != "") {
                    var exists = false; // if already exists dont move
                    for (j = SS2.options.length - 1; j >= 0; j--) {
                        console.log(SS2.options[j].text + " -- " + SS1.options[i].text);
                        if (SS2.options[j].text === SS1.options[i].text)
                            exists = true;
                    }
                    if (exists == false) {
                        SelID = SS1.options[i].value;
                        SelText = SS1.options[i].text;
                        var newRow = new Option(SelText, SelID);
                        SS2.options[SS2.length] = newRow;
                        SS1.options[i] = null;
                    }
                }
            }
        }
        updateOriginTable();
    }
    function SelectMoveCustomersLeft() {
        var SS1 = document.getElementById("assignedCustomers");
        var SS2 = document.getElementById("Customers");
        var SelID = '';
        var SelText = '';
        for (i = SS1.options.length - 1; i >= 0; i--) {
            if (SS1.options[i].selected == true) {
                if (SS1.options[i] != "") {
                    var exists = false; // if already exists dont move
                    for (j = SS2.options.length - 1; j >= 0; j--) {
                        console.log(SS2.options[j].text + " -- " + SS1.options[i].text);
                        if (SS2.options[j].text === SS1.options[i].text)
                            exists = true;
                    }
                    if (exists == false) {
                        SelID = SS1.options[i].value;
                        SelText = SS1.options[i].text;
                        var newRow = new Option(SelText, SelID);
                        SS2.options[SS2.length] = newRow;
                        SS1.options[i] = null;
                    }
                    else SS1.options[i] = null;
                }
            }
        }
        updateOriginTable();
    }   
</script>
